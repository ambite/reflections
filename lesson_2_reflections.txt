
*** What happens when you initialize a repository? Why do you need to do it?

     Git creates a directory .git to hold the metatada about the repository.

How is the staging area different from the working directory and the repository? What value do you  think it offers?

    The staging area holds the files that need to be tracked by the repository, before we decide to commit them. The working directory just holds all the files in that directory. The advantage of the staging area is that we can add a subset of the files of the working directory (i.e., only track a subset), as well as add more files or remove them from tracking.

Commands

  633  cd asteroids/
  634  git checkout master
  635  git log
  636  got diff df03538 25ede83
  638  git status
  639  git diff
  641  git add game.js
  642  git status
  643  git diff --staged
  644  git commit
  645  git diff --staged
  646  git diff
    
 
*** How can you use the staging area to make sure you have one commit per logical change?

    By adding the files relevant to that logical change, and committing them together.

What are some situations when branches would be helpful in keeping your history organized? How would branches help?

     Branches are helpful to experiment with different changes to the code, while keeping a main working copy (the master branch). 

  503  cd ../asteroids/
  504  git branch
  505  git branch easy-mode
  506  git branch
  507  git checkout easy-mode
  508  git branch
  509  git add game.js
  510  git commit
  511  git diff
  512  git log
  513  git diff c2212 e5211
  514  git status

*** How do the diagrams help you visualize the branch structure?

    You can follow the parent of a commit and understand which commits are associated with each branch

    git log --graph --oneline master easy-mode

*** What is the result of merging two branches together? Why do we represent it in the diagram the way we do?

     The changes done by each or the branches are merged for each file. To figure out the differences that can be safely merged, it compares with the last common ancestor commit of both branches. It assumes that the changes done in both branches are correct if they do not conflict. 

The diagram is useful to see the parent of each commit and the multiple branches.

  566  git branch
  567  git status
  568  git merge master coins
  575  git diff 3884 e5211
  576  git merge --abort
  577  git log
  578  git diff 3884 e5211
  579  git add game.js
  580  git commit 
  581  git status
  582  git merge master coins
  584  git log
  585  git show 4035
  586  git branch -d coins
  588  git log --graph --oneline
  589  git diff
  590  git add game.js
  591  git commit
  592  git log
  593  git log --graph --oneline

*** What are the pros and cons of Gitâ€™s automatic merging vs. always doing
merges manually?

       When there are no conflicts git automatic merges the files
       which is convenient and thorough, which makes the programmer more
       productive. 

       If there are conflicts, git points out the sections of difference,
       as well as the common ancestor code. This greatly faciliates
       addressing the conflicts.


  527  git merge master easy-mode
  528  git status
  529  git add game.js
  530  git status
  531  git commit
  532  git log
  533  git log -n 1
